import { useState, useRef, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "../lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { v4 as uuidv4 } from "uuid";

// 멀티미디어 미리보기 컴포넌트 - 텍스트 에디터 내에 직접 렌더링
interface MediaPreviewProps {
  content: string;
  compact?: boolean; // 요약 모드 (미디어 썸네일만 표시)
}

const MediaPreview = ({ content, compact = false }: MediaPreviewProps) => {
  if (!content.trim()) return null;
  
  // 정규식 패턴
  const markdownImageRegex = /!\[(.*?)\]\((.*?)\)/g;
  const uuidPattern = /([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/gi;
  const youtubeRegex = /https?:\/\/(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)([a-zA-Z0-9_-]{11})/g;
  const videoRegex = /<video[\s\S]*?<source src="(.*?)"[\s\S]*?<\/video>/g;
  const fileRegex = /\[파일 다운로드: (.*?)\]\((.*?)\)/g;
  
  // 이미지 드래그 기능 추가 (요약 모드에서는 비활성화)
  useEffect(() => {
    if (compact) return; // 요약 모드에서는 드래그 안함
    const enableDragAndDrop = () => {
      const container = document.querySelector('.media-preview');
      if (!container) return;
      
      // 모든 이미지에 드래그 속성 추가
      const images = container.querySelectorAll('img');
      images.forEach(img => {
        img.setAttribute('draggable', 'true');
        img.classList.add('editor-img');
        
        // 드래그 시작 이벤트
        img.addEventListener('dragstart', (e) => {
          if (!e.dataTransfer) return;
          img.classList.add('dragging-media');
          e.dataTransfer.setData('text/plain', 'dragging-image');
        });
        
        // 드래그 종료 이벤트
        img.addEventListener('dragend', () => {
          img.classList.remove('dragging-media');
        });
      });
    };
    
    // 컴포넌트 마운트 후 이미지 드래그 기능 추가
    setTimeout(enableDragAndDrop, 100);
    
    // 컴포넌트 언마운트 시 정리
    return () => {
      const container = document.querySelector('.media-preview');
      if (!container) return;
      
      const images = container.querySelectorAll('img');
      images.forEach(img => {
        img.removeAttribute('draggable');
      });
    };
  }, [content, compact]);
  
  // 마크다운 이미지와 UUID 포맷 URL을 HTML 이미지로 변환
  const renderImages = (text: string) => {
    // UUID 패턴 인식 및 이미지 URL로 변환
    let processedText = text.replace(uuidPattern, (match) => {
      const completeUrl = `/api/resources/media/${match}`;
      return `![이미지](${completeUrl})`;
    });
    
    // 마크다운 이미지 형식 변환
    return processedText.replace(markdownImageRegex, (match, alt, url) => {
      if (compact) {
        // 요약 모드: 더 작은 썸네일 스타일
        return `<img src="${url}" alt="${alt || '이미지'}" class="editor-img inline-block h-8 w-8 object-cover rounded-md shadow-sm border border-border mx-1" />`;
      } else {
        // 일반 모드: 전체 크기 이미지
        return `<img src="${url}" alt="${alt || '이미지'}" class="editor-img max-w-full rounded-md shadow-sm border border-border my-2" />`;
      }
    });
  };
  
  // YouTube 임베드 변환
  const renderYouTube = (text: string) => {
    return text.replace(youtubeRegex, (match, videoId) => {
      if (compact) {
        // 요약 모드: YouTube 아이콘으로 표시
        return `<span class="inline-flex items-center bg-red-50 text-red-600 rounded-md px-2 py-1 text-xs font-medium mr-1 my-1">
          <svg class="h-3 w-3 mr-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z" fill="currentColor" />
            <polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02" fill="#fff" />
          </svg>
          YouTube
        </span>`;
      } else {
        // 일반 모드: 전체 유튜브 임베드
        return `
          <div class="youtube-embed my-3">
            <div class="aspect-video rounded-lg overflow-hidden shadow-md">
              <iframe 
                width="100%" 
                height="100%" 
                src="https://www.youtube.com/embed/${videoId}" 
                frameborder="0" 
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                allowfullscreen
              ></iframe>
            </div>
          </div>
        `;
      }
    });
  };
  
  // 비디오 태그 처리
  const renderVideos = (text: string) => {
    if (compact) {
      // 요약 모드: 비디오를 아이콘으로 대체
      return text.replace(videoRegex, () => {
        return `<span class="inline-flex items-center bg-blue-50 text-blue-600 rounded-md px-2 py-1 text-xs font-medium mr-1 my-1">
          <svg class="h-3 w-3 mr-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="2" y="6" width="15" height="12" rx="2" stroke="currentColor" stroke-width="2" />
            <path d="M22 12L17 8V16L22 12Z" fill="currentColor" />
          </svg>
          비디오
        </span>`;
      });
    }
    return text; // 일반 모드: 원본 비디오 유지
  };
  
  // 파일 다운로드 링크 스타일링
  const renderFileLinks = (text: string) => {
    return text.replace(fileRegex, (match, fileName, url) => {
      if (compact) {
        // 요약 모드: 파일을 아이콘으로 표시
        return `<span class="inline-flex items-center bg-green-50 text-green-600 rounded-md px-2 py-1 text-xs font-medium mr-1 my-1">
          <svg class="h-3 w-3 mr-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14 2H6C5.46957 2 4.96086 2.21071 4.58579 2.58579C4.21071 2.96086 4 3.46957 4 4V20C4 20.5304 4.21071 21.0391 4.58579 21.4142C4.96086 21.7893 5.46957 22 6 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" />
            <path d="M14 2V8H20" stroke="currentColor" stroke-width="2" />
            <path d="M16 13H8" stroke="currentColor" stroke-width="2" />
            <path d="M16 17H8" stroke="currentColor" stroke-width="2" />
            <path d="M10 9H9H8" stroke="currentColor" stroke-width="2" />
          </svg>
          파일
        </span>`;
      } else {
        // 일반 모드: 전체 다운로드 링크
        return `
          <a href="${url}" download="${fileName}" class="inline-flex items-center px-3 py-2 border border-input rounded-md bg-background hover:bg-accent transition-colors text-sm my-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="7 10 12 15 17 10"></polyline>
              <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
            ${fileName}
          </a>
        `;
      }
    });
  };
  
  // URL 링크 카드로 변환
  const renderUrlCards = (text: string) => {
    // 이미지와 YouTube URL 제외한 URL 패턴
    const urlRegex = /https?:\/\/(?!.*\.(jpg|jpeg|png|gif|webp)(?:\?\S+)?$)(?!(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/))[^\s]+/gi;
    
    return text.replace(urlRegex, (url) => {
      try {
        const domain = new URL(url).hostname.replace('www.', '');
        
        if (compact) {
          // 요약 모드: 간단한 링크 아이콘
          return `<span class="inline-flex items-center bg-purple-50 text-purple-600 rounded-md px-2 py-1 text-xs font-medium mr-1 my-1">
            <svg class="h-3 w-3 mr-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M10 13C11.3132 14.3765 13.0267 15.1447 14.8285 15.1447C16.6303 15.1447 18.3438 14.3765 19.657 13C20.8846 11.6318 21.5918 9.83703 21.6518 7.95329C21.7118 6.06954 21.1198 4.22925 19.9861 2.77611C18.8524 1.32296 17.2437 0.388758 15.4647 0.16375C13.6858 -0.0612583 11.8846 0.437872 10.4308 1.55554C8.97695 2.67321 8.00335 4.33101 7.72636 6.15632C7.44938 7.98162 7.88986 9.84344 8.9445 11.3555" stroke="currentColor" stroke-width="2" />
              <path d="M14 11C12.6868 9.62349 10.9733 8.85526 9.17154 8.85526C7.36978 8.85526 5.65625 9.62349 4.343 11C3.11539 12.3682 2.40815 14.163 2.34817 16.0467C2.2882 17.9305 2.88019 19.7707 4.01389 21.2239C5.14759 22.677 6.75631 23.6112 8.53527 23.8362C10.3142 24.0613 12.1154 23.5621 13.5692 22.4445C15.0231 21.3268 15.9967 19.669 16.2736 17.8437C16.5506 16.0184 16.1101 14.1566 15.0555 12.6445" stroke="currentColor" stroke-width="2" />
            </svg>
            ${domain}
          </span>`;
        } else {
          // 일반 모드: 전체 URL 카드
          return `
            <div class="url-card my-3">
              <div class="url-preview p-3 border rounded-lg shadow-sm bg-gray-50">
                <div class="flex items-center">
                  <div class="url-icon mr-3 text-xl">🔗</div>
                  <div class="url-content overflow-hidden">
                    <div class="url-title font-medium text-gray-900 truncate">${domain}</div>
                    <div class="url-link text-sm text-blue-600 truncate">
                      <a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }
      } catch (e) {
        return url;
      }
    });
  };
  
  // 모든 변환 적용 - 최종 HTML 생성
  let processedContent = content;
  processedContent = renderImages(processedContent);
  processedContent = renderYouTube(processedContent);
  processedContent = renderVideos(processedContent);
  processedContent = renderFileLinks(processedContent);
  processedContent = renderUrlCards(processedContent);
  
  // 컨테이너 클래스 설정 (요약 모드에 따라 다름)
  const containerClass = compact 
    ? "media-preview media-preview-compact flex flex-wrap items-center gap-1 p-2 bg-gray-50 rounded-md border"
    : "media-preview";
  
  return (
    <div 
      className={containerClass}
      dangerouslySetInnerHTML={{ __html: processedContent }}
    />
  );
};

// UI 컴포넌트
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";

// 아이콘
import {
  ArrowLeft,
  ImageIcon,
  Trash2,
  Save,
  X,
  Upload,
  Clock,
  FileUp,
  UploadCloud,
  Plus,
  Tag,
  Info,
  AlertCircle,
  FileText,
  Check,
  ChevronRight,
  ChevronDown,
  ChevronLeft,
  Link2,
  Video,
  FolderOpen,
  Smile,
  CalendarIcon
} from "lucide-react";

// 카테고리 라벨
const categoryLabels: Record<string, string> = {
  "hardware_design": "하드웨어 설계도",
  "software": "소프트웨어 오픈소스",
  "3d_model": "3D 모델링 파일",
  "ai_model": "AI 모델",
  "free_content": "프리 콘텐츠",
  "flash_game": "플래시 게임",
};

// 세부 카테고리 옵션
const detailCategoryOptions = [
  { value: "arduino", label: "아두이노" },
  { value: "raspberry_pi", label: "라즈베리 파이" },
  { value: "electronics", label: "전자공학" },
  { value: "robotics", label: "로보틱스" },
  { value: "iot", label: "IoT" },
  { value: "game", label: "게임" },
  { value: "utility", label: "유틸리티" },
  { value: "education", label: "교육" },
  { value: "science", label: "과학" },
  { value: "art", label: "예술" },
  { value: "music", label: "음악" },
  { value: "other", label: "기타" },
];

// 파일 타입 인터페이스
interface FileWithPreview extends File {
  preview?: string;
  progress?: number;
}

// 폼 유효성 검사 스키마 - 모든 필드를 선택 사항으로 변경하고 최소 문자수 제한 제거
const formSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  resourceType: z.string().default("hardware_design"),
  uploadDate: z.string().optional(),
  tags: z.string().optional(),
  downloadUrl: z.string().optional(),
  howToUse: z.string().optional(),
  assemblyInstructions: z.string().optional(),
  materials: z.string().optional(),
  dimensions: z.string().optional(),
  sourceSite: z.string().optional(),
  isFeatured: z.boolean().optional(),
});

export default function ResourceUploadPage() {
  const [_, setLocation] = useLocation();
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [thumbnailFile, setThumbnailFile] = useState<FileWithPreview | null>(null);
  const [galleryFiles, setGalleryFiles] = useState<FileWithPreview[]>([]);
  const [downloadFile, setDownloadFile] = useState<FileWithPreview | null>(null);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [currentTab, setCurrentTab] = useState<string>("basic");
  const [uploadProgress, setUploadProgress] = useState(0);
  const [resourceTypeInfo, setResourceTypeInfo] = useState<string>("");

  // 미디어 에디터 관련 상태
  const [urlInputActive, setUrlInputActive] = useState(false);
  const [urlInput, setUrlInput] = useState("");
  const [currentEditor, setCurrentEditor] = useState<string | null>(null);

  // 미디어 파일 입력 참조
  const mediaImageInputRef = useRef<HTMLInputElement>(null);
  const mediaGifInputRef = useRef<HTMLInputElement>(null);
  const mediaVideoInputRef = useRef<HTMLInputElement>(null);
  const mediaFileInputRef = useRef<HTMLInputElement>(null);
  const urlInputRef = useRef<HTMLInputElement>(null);

  // 폼 초기화
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      description: "",
      resourceType: "hardware_design", // 기본값 설정
      tags: "",
      downloadUrl: "",
      howToUse: "",
      assemblyInstructions: "",
      materials: "",
      dimensions: "",
      sourceSite: "",
      isFeatured: false,
    },
  });

  // 리소스 타입 변경 시 정보 업데이트
  const watchResourceType = form.watch("resourceType");
  useEffect(() => {
    switch(watchResourceType) {
      case 'hardware_design':
        setResourceTypeInfo("하드웨어 설계도는 전자 기기, 회로, 3D 프린팅 모델 등의 설계 파일입니다. 조립 방법과 필요한 재료를 상세히 기재해주세요.");
        break;
      case 'software':
        setResourceTypeInfo("소프트웨어 오픈소스는 자유롭게 사용, 수정, 배포할 수 있는 코드와 프로그램입니다. 설치 및 사용 방법을 명확히 안내해주세요.");
        break;
      case '3d_model':
        setResourceTypeInfo("3D 모델링 파일은 3D 프린팅이나 디지털 환경에서 사용할 수 있는 3차원 모델입니다. 권장 프린팅 설정을 함께 제공해주세요.");
        break;
      case 'ai_model':
        setResourceTypeInfo("AI 모델은 머신러닝 또는 딥러닝 모델 파일입니다. 모델의 훈련 방법, 데이터셋, 성능 지표를 포함해주세요.");
        break;
      case 'free_content':
        setResourceTypeInfo("프리 콘텐츠는 무료로 이용 가능한 디지털 콘텐츠입니다. 라이센스 정보와 출처를 반드시 명시해주세요.");
        break;
      case 'flash_game':
        setResourceTypeInfo("플래시 게임은 웹에서 실행 가능한 게임 파일입니다. 게임 조작법과 목표를 설명해주세요.");
        break;
      default:
        setResourceTypeInfo("");
    }
  }, [watchResourceType]);

  // 리소스 생성 뮤테이션
  const mutation = useMutation({
    mutationFn: async (formData: FormData) => {
      setIsUploading(true);
      const response = await apiRequest(
        "POST",
        "/api/resources/upload",
        formData,
        { 
          isFormData: true, 
          onProgress: (progress: number) => setUploadProgress(progress) 
        }
      );
      return await response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "리소스 업로드 성공",
        description: "리소스가 성공적으로 업로드되었습니다.",
      });
      setIsUploading(false);
      setLocation("/admin/resources");
    },
    onError: (error: Error) => {
      setIsUploading(false);
      toast({
        title: "업로드 실패",
        description: `업로드 중 오류가 발생했습니다: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // 파일 선택 핸들러
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>, type: 'thumbnail' | 'gallery' | 'download') => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const file = files[0] as FileWithPreview;
    file.preview = URL.createObjectURL(file);
    file.progress = 0;

    if (type === 'thumbnail') {
      setThumbnailFile(file);
    } else if (type === 'gallery') {
      setGalleryFiles(prev => [...prev, file]);
    } else if (type === 'download') {
      setDownloadFile(file);
    }

    // 파일 선택 후 input 초기화
    e.target.value = '';
  };

  // 갤러리 이미지 삭제
  const removeGalleryFile = (index: number) => {
    setGalleryFiles(prev => prev.filter((_, i) => i !== index));
  };

  // 폼 로컬 저장
  const saveFormLocally = () => {
    const formValues = form.getValues();
    localStorage.setItem("resourceForm", JSON.stringify(formValues));

    const filesInfo = {
      hasThumbnail: !!thumbnailFile,
      galleryCount: galleryFiles.length,
      hasDownload: !!downloadFile
    };
    localStorage.setItem("resourceFilesInfo", JSON.stringify(filesInfo));

    setLastSaved(new Date());
    toast({
      title: "임시 저장 완료",
      description: "작성 중인 내용이 브라우저에 저장되었습니다.",
    });
  };

  // 로컬 저장 데이터 불러오기
  const loadLocalSave = () => {
    const savedForm = localStorage.getItem("resourceForm");
    if (savedForm) {
      try {
        const parsedForm = JSON.parse(savedForm);
        form.reset(parsedForm);

        toast({
          title: "임시 저장 내용 불러오기 성공",
          description: "마지막으로 저장된 내용을 불러왔습니다.",
        });
      } catch (e) {
        console.error("저장된 폼 데이터 파싱 오류:", e);
        toast({
          title: "불러오기 실패",
          description: "저장된 데이터를 불러오는데 실패했습니다.",
          variant: "destructive",
        });
      }
    } else {
      toast({
        title: "저장된 내용 없음",
        description: "불러올 임시 저장 데이터가 없습니다.",
        variant: "destructive",
      });
    }
  };

  // 리소스 업로드 제출
  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      const formData = new FormData();

      // 기본 정보 추가
      Object.entries(values).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          formData.append(key, String(value));
        }
      });
      
      // sourceSite 필드에 downloadUrl 값을 복사 (출처 사이트를 다운로드 URL로 통합)
      if (values.downloadUrl) {
        formData.append("sourceSite", String(values.downloadUrl));
      }

      // 파일 추가
      if (thumbnailFile) {
        formData.append("image", thumbnailFile);
      }

      galleryFiles.forEach((file, index) => {
        formData.append(`gallery_${index}`, file);
      });

      if (downloadFile) {
        formData.append("downloadFile", downloadFile);
      }

      await mutation.mutateAsync(formData);
    } catch (error) {
      console.error("폼 제출 오류:", error);
    }
  };



  // 미디어 첨부 도구 관련 함수들

  // 미디어 첨부 핸들러 함수들
  const handleMediaImageSelect = (fieldName: string) => {
    setCurrentEditor(fieldName);
    if (mediaImageInputRef.current) {
      mediaImageInputRef.current.value = '';
      mediaImageInputRef.current.click();
    }
  };

  const handleMediaGifSelect = (fieldName: string) => {
    setCurrentEditor(fieldName);
    if (mediaGifInputRef.current) {
      mediaGifInputRef.current.value = '';
      mediaGifInputRef.current.click();
    }
  };

  const handleMediaVideoSelect = (fieldName: string) => {
    setCurrentEditor(fieldName);
    if (mediaVideoInputRef.current) {
      mediaVideoInputRef.current.value = '';
      mediaVideoInputRef.current.click();
    }
  };

  const handleMediaFileSelect = (fieldName: string) => {
    setCurrentEditor(fieldName);
    if (mediaFileInputRef.current) {
      mediaFileInputRef.current.value = '';
      mediaFileInputRef.current.click();
    }
  };

  // URL 입력 토글
  const toggleUrlInput = (fieldName: string) => {
    setCurrentEditor(fieldName);
    setUrlInputActive(prev => !prev);
    if (!urlInputActive && urlInputRef.current) {
      setTimeout(() => urlInputRef.current?.focus(), 100);
    }
  };

  // 이미지 파일 업로드 처리
  const handleMediaImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0 || !currentEditor) return;

    const file = files[0];
    
    try {
      // 폼 데이터 준비
      const formData = new FormData();
      formData.append('image', file);
      
      // 이미지 업로드 API 호출
      const response = await apiRequest(
        "POST",
        "/api/resources/upload-image",
        formData,
        { isFormData: true }
      );
      
      const data = await response.json();
      
      if (data.success && data.url) {
        // 성공 시 에디터에 이미지 추가
        const markdownImage = `![${file.name}](${data.url})`;
        appendToEditor(currentEditor, markdownImage);
        
        toast({
          title: "이미지 업로드 성공",
          description: "이미지가 에디터에 추가되었습니다.",
        });
      } else {
        throw new Error(data.message || "이미지 업로드 실패");
      }
    } catch (error) {
      console.error("이미지 업로드 오류:", error);
      toast({
        title: "이미지 업로드 실패",
        description: "이미지를 업로드하는 중 오류가 발생했습니다.",
        variant: "destructive",
      });
    }
    
    // 파일 선택 초기화
    e.target.value = '';
  };

  // 파일 업로드 처리
  const handleMediaFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0 || !currentEditor) return;

    const file = files[0];
    
    try {
      // 폼 데이터 준비
      const formData = new FormData();
      formData.append('file', file);
      
      // 파일 업로드 API 호출
      const response = await apiRequest(
        "POST",
        "/api/resources/upload-file",
        formData,
        { isFormData: true }
      );
      
      const data = await response.json();
      
      if (data.success && data.url) {
        // 성공 시 에디터에 파일 다운로드 링크 추가
        const fileMarkdown = `[파일 다운로드: ${file.name}](${data.url})`;
        appendToEditor(currentEditor, fileMarkdown);
        
        toast({
          title: "파일 업로드 성공",
          description: "파일 다운로드 링크가 에디터에 추가되었습니다.",
        });
      } else {
        throw new Error(data.message || "파일 업로드 실패");
      }
    } catch (error) {
      console.error("파일 업로드 오류:", error);
      toast({
        title: "파일 업로드 실패",
        description: "파일을 업로드하는 중 오류가 발생했습니다.",
        variant: "destructive",
      });
    }
    
    // 파일 선택 초기화
    e.target.value = '';
  };

  // YouTube URL 추가
  const handleUrlAdd = () => {
    if (!urlInput.trim() || !currentEditor) {
      setUrlInputActive(false);
      setUrlInput("");
      return;
    }
    
    // YouTube URL 추가
    appendToEditor(currentEditor, urlInput.trim());
    
    // 상태 초기화
    setUrlInputActive(false);
    setUrlInput("");
    setCurrentEditor(null);
  };

  // 에디터에 컨텐츠 추가 헬퍼 함수
  const appendToEditor = (fieldName: string, content: string) => {
    const currentValue = form.getValues(fieldName as any) || '';
    const newValue = currentValue + (currentValue.length > 0 ? '\n\n' : '') + content;
    form.setValue(fieldName as any, newValue);
    
    // 미리보기 업데이트 (텍스트 영역에 변경 사항 반영)
    const textArea = document.getElementById(`${fieldName}`) as HTMLTextAreaElement;
    if (textArea) {
      updateTextareaFromPreview(document.querySelector('.media-preview') as HTMLElement, textArea);
    }
  };

  // 미리보기에서 텍스트 영역으로 변경 사항 반영
  const updateTextareaFromPreview = (previewContent: HTMLElement, textAreaElement: HTMLTextAreaElement) => {
    if (!previewContent || !textAreaElement) return;
    // 텍스트 영역에 변경 사항 반영 로직 추가
    // (필요시 구현)
  };

  // 갤러리 이미지 미리보기 카드
  const FilePreviewCard = ({ file, onDelete }: { file: FileWithPreview, onDelete: () => void }) => (
    <div className="relative border rounded-md overflow-hidden">
      <div className="aspect-square w-32 overflow-hidden">
        <img 
          src={file.preview} 
          alt={file.name} 
          className="w-full h-full object-cover transition-transform duration-200 hover:scale-110" 
        />
      </div>
      <button 
        type="button" 
        onClick={onDelete}
        className="absolute top-1 right-1 bg-black/60 text-white rounded-full p-1 hover:bg-black/80 transition-colors"
      >
        <X className="h-3 w-3" />
      </button>
      {file.progress !== undefined && file.progress < 100 && (
        <Progress value={file.progress} className="absolute bottom-0 left-0 right-0 h-1 rounded-none" />
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-background">
      <div className="container py-6 max-w-screen-lg mx-auto">
        {/* 상단 헤더 */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-2">
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={() => setLocation('/admin/resources')}
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="text-2xl font-bold">자료 업로드</h1>
          </div>
          <div className="flex items-center space-x-2">
            {lastSaved && (
              <div className="text-xs text-muted-foreground flex items-center">
                <Clock className="h-3 w-3 mr-1" />
                <span>저장됨: {lastSaved.toLocaleTimeString()}</span>
              </div>
            )}
            <Button 
              variant="outline" 
              size="sm"
              onClick={saveFormLocally}
            >
              <Save className="h-4 w-4 mr-1" />
              임시 저장
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={loadLocalSave}
            >
              <FolderOpen className="h-4 w-4 mr-1" />
              불러오기
            </Button>
          </div>
        </div>
        
        {/* 업로드 진행 표시줄 */}
        {isUploading && (
          <div className="mb-4">
            <div className="flex items-center justify-between mb-1">
              <span className="text-sm font-medium">업로드 중... {Math.round(uploadProgress)}%</span>
            </div>
            <Progress value={uploadProgress} className="h-2" />
          </div>
        )}
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <Tabs 
              value={currentTab} 
              onValueChange={setCurrentTab}
              className="w-full"
            >
              <div className="mb-6">
                <TabsList className="w-full grid grid-cols-3 md:grid-cols-5 lg:grid-cols-6">
                  <TabsTrigger value="basic" className="gap-1">
                    <FileText className="h-4 w-4" />
                    <span className="hidden md:inline-block">기본 정보</span>
                  </TabsTrigger>
                  <TabsTrigger value="details" className="gap-1">
                    <Info className="h-4 w-4" />
                    <span className="hidden md:inline-block">상세 정보</span>
                  </TabsTrigger>
                  <TabsTrigger value="files" className="gap-1">
                    <UploadCloud className="h-4 w-4" />
                    <span className="hidden md:inline-block">파일 첨부</span>
                  </TabsTrigger>
                </TabsList>
              </div>
              
              {/* 기본 정보 탭 */}
              <TabsContent value="basic" className="space-y-6">
                <Card>
                  <CardContent className="pt-6 space-y-6">
                    <FormField
                      control={form.control}
                      name="title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>제목 <span className="text-red-500">*</span></FormLabel>
                          <FormControl>
                            <Input placeholder="자료 제목을 입력하세요" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="resourceType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>자료 유형 <span className="text-red-500">*</span></FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="자료 유형을 선택하세요" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {Object.entries(categoryLabels).map(([value, label]) => (
                                <SelectItem key={value} value={value}>{label}</SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          {resourceTypeInfo && (
                            <FormDescription>
                              <div className="flex items-start mt-2">
                                <Info className="h-4 w-4 mr-2 mt-0.5 text-blue-500" />
                                <span className="text-sm">{resourceTypeInfo}</span>
                              </div>
                            </FormDescription>
                          )}
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="tags"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>태그</FormLabel>
                          <div className="flex items-center space-x-2">
                            <Tag className="h-4 w-4 text-muted-foreground" />
                            <FormControl>
                              <Input placeholder="태그를 입력하세요 (쉼표로 구분)" {...field} />
                            </FormControl>
                          </div>
                          <FormDescription>
                            쉼표로 구분하여 여러 태그를 입력할 수 있습니다.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>설명</FormLabel>
                          <div className="relative">
                            <FormControl>
                              <Textarea 
                                placeholder="자료에 대한 설명을 입력하세요" 
                                className="min-h-32 resize-y"
                                id="description"
                                {...field} 
                              />
                            </FormControl>
                            
                            {/* 미디어 첨부 도구 */}
                            <div className="absolute right-3 bottom-3 flex space-x-1">
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaImageSelect('description')}
                              >
                                <ImageIcon className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaVideoSelect('description')}
                              >
                                <Video className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaFileSelect('description')}
                              >
                                <FileUp className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => toggleUrlInput('description')}
                              >
                                <Link2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          
                          {/* URL 입력 필드 */}
                          {urlInputActive && currentEditor === 'description' && (
                            <div className="mt-2 flex space-x-2">
                              <Input
                                ref={urlInputRef}
                                value={urlInput}
                                onChange={(e) => setUrlInput(e.target.value)}
                                placeholder="URL을 입력하세요 (YouTube 등)"
                                className="flex-1"
                                onKeyDown={(e) => e.key === 'Enter' && handleUrlAdd()}
                              />
                              <Button 
                                type="button" 
                                onClick={handleUrlAdd}
                                size="sm"
                              >
                                추가
                              </Button>
                              <Button 
                                type="button" 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  setUrlInputActive(false);
                                  setUrlInput("");
                                }}
                              >
                                취소
                              </Button>
                            </div>
                          )}
                          
                          {/* 미리보기 */}
                          {field.value && (
                            <div className="mt-4">
                              <FormLabel className="text-sm text-muted-foreground">미리보기</FormLabel>
                              <div className="mt-2 p-4 border rounded-md bg-muted/50">
                                <MediaPreview content={field.value} />
                              </div>
                            </div>
                          )}
                          
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </TabsContent>
              
              {/* 상세 정보 탭 */}
              <TabsContent value="details" className="space-y-6">
                <Card>
                  <CardContent className="pt-6 space-y-6">
                    <FormField
                      control={form.control}
                      name="downloadUrl"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>다운로드 URL</FormLabel>
                          <FormControl>
                            <Input placeholder="외부 다운로드 링크 (있는 경우)" {...field} />
                          </FormControl>
                          <FormDescription>
                            외부 사이트에서 다운로드할 수 있는 URL이 있다면 입력하세요.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="howToUse"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>사용 방법</FormLabel>
                          <div className="relative">
                            <FormControl>
                              <Textarea 
                                placeholder="자료 사용 방법을 설명하세요" 
                                className="min-h-32 resize-y" 
                                id="howToUse"
                                {...field} 
                              />
                            </FormControl>
                            
                            {/* 미디어 첨부 도구 */}
                            <div className="absolute right-3 bottom-3 flex space-x-1">
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaImageSelect('howToUse')}
                              >
                                <ImageIcon className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaVideoSelect('howToUse')}
                              >
                                <Video className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => handleMediaFileSelect('howToUse')}
                              >
                                <FileUp className="h-4 w-4" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 rounded-full"
                                onClick={() => toggleUrlInput('howToUse')}
                              >
                                <Link2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          
                          {/* URL 입력 필드 */}
                          {urlInputActive && currentEditor === 'howToUse' && (
                            <div className="mt-2 flex space-x-2">
                              <Input
                                ref={urlInputRef}
                                value={urlInput}
                                onChange={(e) => setUrlInput(e.target.value)}
                                placeholder="URL을 입력하세요 (YouTube 등)"
                                className="flex-1"
                                onKeyDown={(e) => e.key === 'Enter' && handleUrlAdd()}
                              />
                              <Button 
                                type="button" 
                                onClick={handleUrlAdd}
                                size="sm"
                              >
                                추가
                              </Button>
                              <Button 
                                type="button" 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  setUrlInputActive(false);
                                  setUrlInput("");
                                }}
                              >
                                취소
                              </Button>
                            </div>
                          )}
                          
                          {/* 미리보기 */}
                          {field.value && (
                            <div className="mt-4">
                              <FormLabel className="text-sm text-muted-foreground">미리보기</FormLabel>
                              <div className="mt-2 p-4 border rounded-md bg-muted/50">
                                <MediaPreview content={field.value} />
                              </div>
                            </div>
                          )}
                          
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    {watchResourceType === 'hardware_design' && (
                      <>
                        <FormField
                          control={form.control}
                          name="assemblyInstructions"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>조립 방법</FormLabel>
                              <div className="relative">
                                <FormControl>
                                  <Textarea 
                                    placeholder="조립 방법을 단계별로 설명하세요" 
                                    className="min-h-32 resize-y" 
                                    id="assemblyInstructions"
                                    {...field} 
                                  />
                                </FormControl>
                                
                                {/* 미디어 첨부 도구 */}
                                <div className="absolute right-3 bottom-3 flex space-x-1">
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="icon"
                                    className="h-8 w-8 rounded-full"
                                    onClick={() => handleMediaImageSelect('assemblyInstructions')}
                                  >
                                    <ImageIcon className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="icon"
                                    className="h-8 w-8 rounded-full"
                                    onClick={() => handleMediaVideoSelect('assemblyInstructions')}
                                  >
                                    <Video className="h-4 w-4" />
                                  </Button>
                                </div>
                              </div>
                              
                              {/* 미리보기 */}
                              {field.value && (
                                <div className="mt-4">
                                  <FormLabel className="text-sm text-muted-foreground">미리보기</FormLabel>
                                  <div className="mt-2 p-4 border rounded-md bg-muted/50">
                                    <MediaPreview content={field.value} />
                                  </div>
                                </div>
                              )}
                              
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="materials"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>필요한 재료</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="필요한 재료와 부품을 나열하세요" 
                                  className="min-h-20 resize-y" 
                                  {...field} 
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="dimensions"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>치수 정보</FormLabel>
                              <FormControl>
                                <Input placeholder="치수 정보 (가로x세로x높이 등)" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </>
                    )}
                    
                    <FormField
                      control={form.control}
                      name="sourceSite"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>출처</FormLabel>
                          <FormControl>
                            <Input placeholder="원본 자료의 출처 (사이트, 저자 등)" {...field} />
                          </FormControl>
                          <FormDescription>
                            원본 자료의 출처나 제작자 정보를 입력하세요.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </TabsContent>
              
              {/* 파일 첨부 탭 */}
              <TabsContent value="files" className="space-y-6">
                <Card>
                  <CardContent className="pt-6 space-y-6">
                    <div>
                      <h3 className="text-lg font-medium mb-2">썸네일 이미지</h3>
                      <div className="flex items-start space-x-4">
                        <div className="flex-shrink-0 w-32">
                          {thumbnailFile ? (
                            <div className="relative aspect-square rounded-md overflow-hidden">
                              <img 
                                src={thumbnailFile.preview} 
                                alt="Thumbnail preview" 
                                className="w-full h-full object-cover" 
                              />
                              <button 
                                type="button" 
                                onClick={() => setThumbnailFile(null)}
                                className="absolute top-1 right-1 bg-black/60 text-white rounded-full p-1 hover:bg-black/80 transition-colors"
                              >
                                <X className="h-3 w-3" />
                              </button>
                            </div>
                          ) : (
                            <div 
                              className="aspect-square flex flex-col items-center justify-center border-2 border-dashed rounded-md text-muted-foreground hover:text-foreground"
                              onClick={() => fileInputRef.current?.click()}
                            >
                              <ImageIcon className="h-8 w-8 mb-2" />
                              <span className="text-xs text-center">이미지<br/>업로드</span>
                            </div>
                          )}
                        </div>
                        
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground mb-2">
                            자료를 대표하는 이미지를 업로드하세요. 권장 크기는 800x600px입니다.
                          </p>
                          <Button 
                            type="button" 
                            variant="outline"
                            size="sm"
                            onClick={() => fileInputRef.current?.click()}
                          >
                            <Upload className="h-4 w-4 mr-2" />
                            이미지 선택
                          </Button>
                          <input 
                            type="file" 
                            ref={fileInputRef}
                            className="hidden"
                            accept="image/*"
                            onChange={(e) => handleFileSelect(e, 'thumbnail')}
                          />
                        </div>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div>
                      <h3 className="text-lg font-medium mb-2">갤러리 이미지</h3>
                      <p className="text-sm text-muted-foreground mb-4">
                        자료를 보여주는 추가 이미지를 업로드하세요. 최대 5개까지 가능합니다.
                      </p>
                      
                      <div className="flex flex-wrap gap-4">
                        {galleryFiles.map((file, index) => (
                          <FilePreviewCard 
                            key={index} 
                            file={file} 
                            onDelete={() => removeGalleryFile(index)} 
                          />
                        ))}
                        
                        {galleryFiles.length < 5 && (
                          <div 
                            className="w-32 aspect-square flex flex-col items-center justify-center border-2 border-dashed rounded-md text-muted-foreground hover:text-foreground"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = 'image/*';
                              input.onchange = (e) => handleFileSelect(e as React.ChangeEvent<HTMLInputElement>, 'gallery');
                              input.click();
                            }}
                          >
                            <Plus className="h-8 w-8 mb-2" />
                            <span className="text-xs text-center">이미지<br/>추가</span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div>
                      <h3 className="text-lg font-medium mb-2">다운로드 파일</h3>
                      <div className="flex items-start space-x-4">
                        <div className="flex-shrink-0">
                          {downloadFile ? (
                            <div className="border rounded-md p-3 bg-muted w-60">
                              <div className="flex items-center">
                                <FileText className="h-8 w-8 mr-2 text-blue-500" />
                                <div className="overflow-hidden flex-1">
                                  <p className="font-medium truncate">{downloadFile.name}</p>
                                  <p className="text-xs text-muted-foreground">{(downloadFile.size / 1024 / 1024).toFixed(2)} MB</p>
                                </div>
                                <button 
                                  type="button" 
                                  onClick={() => setDownloadFile(null)}
                                  className="text-muted-foreground hover:text-foreground transition-colors"
                                >
                                  <X className="h-4 w-4" />
                                </button>
                              </div>
                            </div>
                          ) : (
                            <Button 
                              type="button" 
                              variant="outline"
                              onClick={() => {
                                const input = document.createElement('input');
                                input.type = 'file';
                                input.onchange = (e) => handleFileSelect(e as React.ChangeEvent<HTMLInputElement>, 'download');
                                input.click();
                              }}
                            >
                              <FileUp className="h-4 w-4 mr-2" />
                              파일 업로드
                            </Button>
                          )}
                        </div>
                        
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground">
                            사용자가 다운로드할 파일을 업로드하세요. 압축 파일(ZIP)을 권장합니다.
                          </p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
            
            <div className="pt-6 space-x-2 flex justify-end">
              <Button
                type="button"
                variant="outline"
                disabled={isUploading}
                onClick={() => setLocation('/admin/resources')}
              >
                취소
              </Button>
              <Button 
                type="submit"
                disabled={isUploading}
              >
                {isUploading ? (
                  <span className="flex items-center">
                    <span className="animate-spin mr-2">
                      <UploadCloud className="h-4 w-4" />
                    </span>
                    업로드 중...
                  </span>
                ) : (
                  <span className="flex items-center">
                    <Upload className="h-4 w-4 mr-2" />
                    자료 업로드
                  </span>
                )}
              </Button>
            </div>
          </form>
        </Form>
        
        {/* 히든 파일 입력 필드 */}
        <input 
          type="file" 
          ref={mediaImageInputRef}
          className="hidden"
          accept="image/*"
          onChange={handleMediaImageUpload}
        />
        <input 
          type="file" 
          ref={mediaGifInputRef}
          className="hidden"
          accept="image/gif"
          onChange={handleMediaImageUpload}
        />
        <input 
          type="file" 
          ref={mediaVideoInputRef}
          className="hidden"
          accept="video/*"
          onChange={handleMediaImageUpload}
        />
        <input 
          type="file" 
          ref={mediaFileInputRef}
          className="hidden"
          onChange={handleMediaFileUpload}
        />
      </div>
    </div>
  );
}