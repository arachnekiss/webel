name: Stage 2 HARD-VERIFY

on:
  push:
    branches: [ main, stage2-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-stage2:
    name: Stage 2 Verification
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Verify Stage 2 Requirements
      run: node performance/verify_stage2.mjs
      
    - name: Check Lighthouse Scores
      run: |
        # Extract and verify desktop performance score
        DESKTOP_SCORE=$(grep -o 'PASS desktop performance score: [0-9]*' performance/verify_stage2.log | grep -o '[0-9]*')
        if [ -z "$DESKTOP_SCORE" ] || [ "$DESKTOP_SCORE" -lt 90 ]; then
          echo "❌ Desktop Lighthouse score must be at least 90. Current score: $DESKTOP_SCORE"
          exit 1
        else
          echo "✅ Desktop Lighthouse score: $DESKTOP_SCORE"
        fi
        
        # Extract and verify mobile performance score
        MOBILE_SCORE=$(grep -o 'PASS mobile performance score: [0-9]*' performance/verify_stage2.log | grep -o '[0-9]*')
        if [ -z "$MOBILE_SCORE" ] || [ "$MOBILE_SCORE" -lt 90 ]; then
          echo "❌ Mobile Lighthouse score must be at least 90. Current score: $MOBILE_SCORE"
          exit 1
        else
          echo "✅ Mobile Lighthouse score: $MOBILE_SCORE"
        fi
    
    - name: Verify Error Rates
      run: |
        # Extract and verify error rate
        ERROR_RATE=$(grep -o 'PASS Error Rate: [0-9.]*%' performance/verify_stage2.log | grep -o '[0-9.]*')
        if [ -z "$ERROR_RATE" ] || (( $(echo "$ERROR_RATE > 0.1" | bc -l) )); then
          echo "❌ Error rate must be less than 0.1%. Current rate: $ERROR_RATE%"
          exit 1
        else
          echo "✅ Error rate: $ERROR_RATE%"
        fi
    
    - name: Check Database Optimization Report
      run: |
        # Verify database optimization report has minimum content
        DB_REPORT_SIZE=$(wc -c < performance/database-optimization-report.md)
        if [ "$DB_REPORT_SIZE" -lt 5000 ]; then
          echo "❌ Database optimization report must be at least 5000 bytes. Current size: $DB_REPORT_SIZE bytes"
          exit 1
        else
          echo "✅ Database optimization report size: $DB_REPORT_SIZE bytes"
        fi
    
    - name: Check Bottleneck Analysis
      run: |
        # Verify bottleneck analysis has minimum content
        BOTTLENECK_REPORT_SIZE=$(wc -c < performance/bottleneck-analysis.md)
        if [ "$BOTTLENECK_REPORT_SIZE" -lt 5000 ]; then
          echo "❌ Bottleneck analysis report must be at least 5000 bytes. Current size: $BOTTLENECK_REPORT_SIZE bytes"
          exit 1
        else
          echo "✅ Bottleneck analysis report size: $BOTTLENECK_REPORT_SIZE bytes"
        fi
    
    - name: Check Sentry Screenshot
      run: |
        # Verify Sentry screenshot exists and has minimum size
        if [ ! -f performance/sentry-screenshot.png ]; then
          echo "❌ Sentry screenshot not found"
          exit 1
        fi
        
        SENTRY_SCREENSHOT_SIZE=$(wc -c < performance/sentry-screenshot.png)
        if [ "$SENTRY_SCREENSHOT_SIZE" -lt 10000 ]; then
          echo "❌ Sentry screenshot must be at least 10000 bytes. Current size: $SENTRY_SCREENSHOT_SIZE bytes"
          exit 1
        else
          echo "✅ Sentry screenshot size: $SENTRY_SCREENSHOT_SIZE bytes"
        fi
    
    - name: Verify Summary Report
      run: |
        # Check summary report has minimum content
        SUMMARY_SIZE=$(wc -c < performance/summary.md)
        if [ "$SUMMARY_SIZE" -lt 1000 ]; then
          echo "❌ Summary report must be at least 1000 bytes. Current size: $SUMMARY_SIZE bytes"
          exit 1
        else
          echo "✅ Summary report size: $SUMMARY_SIZE bytes"
        fi
    
    - name: Validate Test Data is Real, Not Placeholder
      run: |
        # Check for placeholder keywords in test data
        if grep -i "placeholder\|dummy\|fake\|mock\|test\|placeholder\|example" performance/basic-load-raw.json performance/upload-stress-raw.json; then
          echo "❌ Test data contains placeholder values. Only real test data is accepted."
          exit 1
        else
          echo "✅ No placeholder data detected in test files."
        fi
    
    - name: Verification Complete
      if: success()
      run: |
        echo "========================================="
        echo "✅ ALL STAGE 2 VERIFICATION CHECKS PASSED"
        echo "========================================="