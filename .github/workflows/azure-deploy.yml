name: Deploy to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        echo "=== 1. 서버 및 클라이언트 종속성 설치 ==="
        npm ci
        
        echo "=== 2. 서버 및 클라이언트 빌드 ==="
        # 프로젝트 빌드 (서버 측 dist/ 생성)
        npm run build
        
        # 빌드 결과 확인
        if [ -d dist ]; then
          echo "서버 빌드 완료: dist/ 디렉토리 생성됨"
          ls -la dist/
        else
          echo "오류: 서버 빌드 실패. dist/ 디렉토리를 찾을 수 없음"
        fi
        
        # 클라이언트 빌드 처리 확인
        echo "=== 3. 클라이언트 빌드 결과 확인 ==="
        if [ -d client/dist ]; then
          echo "클라이언트 빌드 완료: client/dist 디렉토리 존재함"
          ls -la client/dist/
        else
          echo "참고: client/dist 디렉토리가 없습니다. 대신 client/src를 사용합니다."
        fi
      env:
        CI: true
    
    - name: Run database migrations
      run: |
        # 데이터베이스 연결 문자열 직접 지정 (디버깅용)
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        # 환경 변수 디버깅 출력
        echo "🔍 DATABASE_URL 확인:"
        echo "- 환경 변수에 DATABASE_URL 존재 여부: $(if [ -n "$DATABASE_URL" ]; then echo "있음"; else echo "없음"; fi)"
        echo "- DATABASE_URL 길이: ${#DATABASE_URL} 글자"
        
        # 환경 변수 파일 생성 (.env.production)
        echo "🔄 .env.production 파일 생성 중..."
        echo "DATABASE_URL=$DATABASE_URL" > .env.production
        echo "NODE_ENV=production" >> .env.production
        echo "SKIP_MIGRATION=true" >> .env.production  # Azure에서 마이그레이션 건너뛰기 플래그 추가
        
        # 파일 내용 확인 (민감 정보 마스킹하여 출력)
        echo "🔍 .env.production 파일 내용 확인:"
        grep -v "DATABASE_URL" .env.production || true
        echo "DATABASE_URL=********(설정됨)********"
        
        # env.production 파일도 생성 (점 없는 버전, Azure에서 숨김 파일 문제 방지)
        cp .env.production env.production
        echo "✅ env.production 파일도 생성 완료"
        
        # 마이그레이션 환경 준비 확인
        ls -la drizzle.config.* || true
        
        # drizzle-kit이 설치되어 있는지 확인 (global 설치 시도)
        echo "🔍 drizzle-kit 설치 상태 확인..."
        if ! npm list -g drizzle-kit &> /dev/null; then
          echo "🔄 drizzle-kit을 글로벌로 설치합니다..."
          npm install -g drizzle-kit
          echo "✅ drizzle-kit 글로벌 설치 완료"
        else
          echo "✅ drizzle-kit이 이미 글로벌로 설치되어 있습니다."
        fi
        
        # 마이그레이션 실행 (로컬 drizzle-kit 모듈 아니라 글로벌 drizzle-kit 사용)
        echo "🔄 데이터베이스 마이그레이션을 실행합니다..."
        
        # 1. 글로벌 drizzle-kit 직접 실행 
        echo "방법 1: 글로벌 drizzle-kit push 실행"
        DATABASE_URL="$DATABASE_URL" drizzle-kit push || true
        
        # 2. SQL 마이그레이션 스크립트 생성 및 실행
        echo "방법 2: SQL 마이그레이션 스크립트 생성 및 실행"
        # SQL 마이그레이션 파일 생성
        DATABASE_URL="$DATABASE_URL" drizzle-kit generate:pg --out=./migration.sql || true
        
        # migration.sql 파일이 생성되었는지 확인
        if [ -f "./migration.sql" ]; then
          echo "✅ SQL 마이그레이션 스크립트 생성됨"
          echo "💾 migration.sql 내용:"
          cat ./migration.sql | grep -v 'password' || true
          
          # 마이그레이션 스크립트를 Azure에 포함시키기 위해 복사
          cp ./migration.sql deployment/ || true
        else
          echo "⚠️ SQL 마이그레이션 스크립트 생성 실패 (이미 최신 상태일 수 있음)"
        fi
        
        echo "✅ 마이그레이션 완료"
    
    - name: Prepare deployment package
      run: |
        # 직접 ZIP 패키지 생성 (중간 폴더 없이)
        DEPLOY_DIR="deploy_package"
        rm -rf $DEPLOY_DIR || true
        mkdir -p $DEPLOY_DIR
        
        echo "🔍 빌드 결과 확인:"
        ls -la dist/ || echo "dist/ 디렉토리가 없습니다"
        ls -la client/ || echo "client/ 디렉토리가 없습니다"
        
        # 1. 서버 빌드 파일 복사 (dist 내용물을 루트로 복사)
        if [ -d dist ]; then
          cp -r dist/* $DEPLOY_DIR/
          echo "✅ 서버 빌드 파일 복사 완료 (dist/* → $DEPLOY_DIR/)"
        else
          echo "⚠️ 경고: dist 디렉토리가 없습니다. 빌드가 제대로 되었는지 확인하세요."
        fi
        
        # 2. 클라이언트 파일 복사
        mkdir -p $DEPLOY_DIR/client
        if [ -d client/dist ]; then
          cp -r client/dist $DEPLOY_DIR/client/
          echo "✅ 클라이언트 빌드 파일 복사 완료"
        else
          mkdir -p $DEPLOY_DIR/client/src
          cp -r client/src $DEPLOY_DIR/client/
          echo "✅ 클라이언트 소스 파일 복사 완료"
        fi
        
        # 3. 주요 파일들을 루트 디렉토리에 복사
        cp package.json package-lock.json $DEPLOY_DIR/
        cp startup.js patch-helper.js $DEPLOY_DIR/
        cp web.config .deployment $DEPLOY_DIR/
        
        # 4. 필수 디렉토리 생성 및 콘텐츠 복사
        mkdir -p $DEPLOY_DIR/public/images $DEPLOY_DIR/public/static
        mkdir -p $DEPLOY_DIR/server
        mkdir -p $DEPLOY_DIR/shared
        mkdir -p $DEPLOY_DIR/uploads $DEPLOY_DIR/temp
        
        # 5. 마이그레이션 스크립트가 있으면 복사
        if [ -f migration.sql ]; then
          cp migration.sql $DEPLOY_DIR/
          echo "✅ SQL 마이그레이션 스크립트 복사 완료"
        fi
        
        # 6. drizzle.config.ts 파일 복사
        cp drizzle.config.ts $DEPLOY_DIR/
        
        # 7. shared 디렉토리 내용물 복사
        cp -r shared/* $DEPLOY_DIR/shared/ || echo "shared 디렉토리 복사 중 오류 발생"
        
        # 8. server/startup.js 호환성 파일 생성
        echo "// Azure Kudu 시작 스크립트 호환성 파일" > $DEPLOY_DIR/server/startup.js
        echo "import '../startup.js'; // 루트의 startup.js로 리디렉션" >> $DEPLOY_DIR/server/startup.js
        chmod +x $DEPLOY_DIR/server/startup.js
        echo "✅ server/startup.js 파일 생성 완료 (실행 권한 부여됨)"
        
        # 9. startup.js에도 실행 권한 부여
        chmod +x $DEPLOY_DIR/startup.js
        echo "✅ startup.js 파일에 실행 권한 부여됨"
        
        # 10. 환경 변수 파일 복사
        if [ -f .env.production ]; then
          cp .env.production $DEPLOY_DIR/
          cp .env.production $DEPLOY_DIR/env.production  # 점 없는 버전도 추가
          echo "✅ 환경 변수 파일 복사 완료"
        fi
        
        # 11. public 디렉토리 내용물 복사
        if [ -d public ] && [ ! -f public ]; then
          cp -r public/* $DEPLOY_DIR/public/ || echo "public 디렉토리 내용물 복사 중 오류 발생"
          echo "✅ public 디렉토리 내용물 복사 완료"
        fi
        
        # 12. node_modules 복사
        echo "📦 node_modules 복사 중..."
        cp -r node_modules $DEPLOY_DIR/
        echo "✅ node_modules 복사 완료"
        
        # 13. 패키지 구조 확인 (주요 파일 목록)
        echo "📋 최종 배포 패키지 주요 파일:"
        find $DEPLOY_DIR -maxdepth 2 -type f | sort
        
        # 14. 이 패키지를 deployment로 옮겨 배포 준비
        rm -rf deployment || true
        mv $DEPLOY_DIR deployment
    
    - name: Verify Azure CLI Installation
      run: |
        echo "🔍 Azure CLI 설치 상태 확인 중..."
        # GitHub Actions의 Ubuntu 환경에는 이미 Azure CLI가 설치되어 있음
        if command -v az &> /dev/null; then
          echo "✅ Azure CLI가 이미 설치되어 있습니다"
          az --version | head -n 1
        else
          echo "⚠️ Azure CLI가 설치되어 있지 않습니다"
          echo "⚠️ 다음 단계에서는 Azure CLI 기능을 사용하지 않습니다"
        fi
    
    - name: Clean Up App Service (Optional)
      run: |
        # Azure에 로그인 시도 (publish profile 사용) - 로그인 실패해도 계속 진행
        PUBLISH_PROFILE="${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}"
        APP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
        
        echo "🔍 Azure App Service 환경 준비 중..."
        
        # Azure CLI가 설치되어 있고 Azure 자격 증명이 제공된 경우에만 실행
        if command -v az &> /dev/null && [ -n "$PUBLISH_PROFILE" ] && [ -n "$APP_NAME" ]; then
          echo "🔄 Azure CLI 사용 가능, 자격 증명 확인됨"
          
          # 실패해도 계속 진행하도록 설정 (오류 발생 위치 수정)
          set +e
          
          # 로깅만 수행 (실제 동작 없음) - 안전 모드로 유지
          echo "⚠️ 참고: 실제 정리 작업은 Azure 포털에서 수동으로 수행하는 것이 권장됩니다."
          echo "⚠️ 배포는 계속 진행됩니다."
          
          # 원래 오류 처리 방식으로 돌아가기
          set -e
        else
          echo "⚠️ Azure CLI 또는 자격 증명이 없어 App Service 정리 단계를 건너뜁니다."
        fi
        
        echo "✅ Azure 환경 준비 단계 완료"
    
    - name: Create Custom ZIP Package
      run: |
        # 루트 디렉토리에서 ZIP 파일 생성 (상대 경로로)
        echo "📦 deploy.zip 패키지 생성 중..."
        cd deployment
        # node_modules 크기를 줄이기 위해 불필요한 파일 제거
        find node_modules -name "*.md" -delete || true
        find node_modules -name "*.d.ts" -delete || true
        find node_modules -name "*.map" -delete || true
        find node_modules -path "*/test/*" -delete || true
        find node_modules -path "*/tests/*" -delete || true
        find node_modules -path "*/docs/*" -delete || true
        
        # 최종 ZIP 패키지 생성 (개선된 압축)
        zip -r ../deploy.zip * -x "*.git*" "*.github*" "node_modules/.cache/*" "node_modules/.bin/*"
        cd ..
        
        # ZIP 파일 크기 확인
        ls -lh deploy.zip
        echo "✅ ZIP 패키지 생성 완료 (최적화됨)"
    
    - name: Verify ZIP Package (중요 파일 확인)
      run: |
        # ZIP 파일 무결성 및 내용물 검사
        echo "🔍 ZIP 파일 검증 중..."
        
        # ZIP 파일 존재 확인
        if [ ! -f "deploy.zip" ]; then
          echo "⚠️ 오류: deploy.zip 파일이 존재하지 않습니다."
          exit 1
        fi
        
        # ZIP 파일 크기 확인
        ZIP_SIZE=$(stat -c%s "deploy.zip")
        echo "📊 ZIP 파일 크기: $ZIP_SIZE 바이트"
        
        # ZIP 파일 구조 확인 - 오류 방지를 위해 파이프라인 대신 명시적 임시 파일 사용
        echo "📋 ZIP 파일 내용물 목록 (주요 파일):"
        unzip -l deploy.zip > zip_contents.txt
        grep -E 'startup.js|web.config|package.json|node_modules/|server/|shared/|dist/' zip_contents.txt || echo "⚠️ 주요 파일을 찾을 수 없습니다."
        
        # 필수 파일 존재 확인
        echo "🔍 필수 파일 확인 중..."
        
        # 필수 파일 목록
        REQUIRED_FILES=("startup.js" "web.config" "package.json" "server/startup.js")
        MISSING_FILES=()
        
        for file in "${REQUIRED_FILES[@]}"; do
          if ! grep -q "$file" zip_contents.txt; then
            MISSING_FILES+=("$file")
          fi
        done
        
        # 임시 파일 정리
        rm zip_contents.txt
        
        if [ "${#MISSING_FILES[@]}" -gt 0 ]; then
          echo "⚠️ 경고: 다음 필수 파일이 ZIP 패키지에 없습니다:"
          for missing in "${MISSING_FILES[@]}"; do
            echo "  - $missing"
          done
          
          echo "🔄 ZIP 파일을 수정하여 문제를 해결합니다..."
          
          # 필수 파일 긴급 추가
          mkdir -p fix_missing
          cd fix_missing
          
          # server/startup.js 파일이 누락된 경우
          if echo "${MISSING_FILES[@]}" | grep -q "server/startup.js"; then
            mkdir -p server
            echo "// Azure Kudu 시작 스크립트 호환성 파일" > server/startup.js
            echo "import '../startup.js'; // 루트의 startup.js로 리디렉션" >> server/startup.js
            chmod +x server/startup.js
            echo "✅ server/startup.js 파일 생성 완료"
          fi
          
          # ZIP 파일에 필요한 파일 추가
          if [ -d "server" ]; then
            zip -r ../deploy.zip server/
            echo "✅ 누락된 파일 ZIP에 추가 완료"
          fi
          
          cd ..
          rm -rf fix_missing
        else
          echo "✅ 모든 필수 파일이 ZIP 패키지에 포함되어 있습니다."
        fi
        
        echo "✅ ZIP 패키지 검증 완료"
    
    - name: Deploy to Azure Web App (직접 ZIP 배포)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./deploy.zip
        clean: true
        restart: true
        
    - name: Verify Deployment
      run: |
        echo "✅ Azure App Service에 배포가 완료되었습니다."
        echo "📝 배포 후 확인 사항:"
        echo "  1. Azure 포털에서 앱 서비스 로그 확인 (Kudu/Log stream)"
        echo "  2. 배포된 앱이 정상적으로 시작되었는지 확인"
        echo "  3. 시작 명령이 'node startup.js'인지 확인 (구성 > 일반 설정 > 시작 명령)"
        echo "  4. 환경 변수가 올바르게 설정되어 있는지 확인 (구성 > 애플리케이션 설정)"
        
        # GitHub 로그에 배포 URL 출력
        echo "🌐 배포된 앱 URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"