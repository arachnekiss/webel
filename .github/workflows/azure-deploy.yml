name: Deploy to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        echo "=== 1. 서버 및 클라이언트 종속성 설치 ==="
        npm ci
        
        echo "=== 2. 서버 및 클라이언트 빌드 ==="
        # 프로젝트 빌드 (서버 측 dist/ 생성)
        npm run build
        
        # 빌드 결과 확인
        if [ -d dist ]; then
          echo "서버 빌드 완료: dist/ 디렉토리 생성됨"
          ls -la dist/
        else
          echo "오류: 서버 빌드 실패. dist/ 디렉토리를 찾을 수 없음"
        fi
        
        # 클라이언트 빌드 처리 확인
        echo "=== 3. 클라이언트 빌드 결과 확인 ==="
        if [ -d client/dist ]; then
          echo "클라이언트 빌드 완료: client/dist 디렉토리 존재함"
          ls -la client/dist/
        else
          echo "참고: client/dist 디렉토리가 없습니다. 대신 client/src를 사용합니다."
        fi
      env:
        CI: true
    
    - name: Run database migrations
      run: |
        # 데이터베이스 연결 문자열 직접 지정 (디버깅용)
        export DATABASE_URL="postgresql://arachne@webel:passfor0.@webel.postgres.database.azure.com:5432/postgres?sslmode=require"
        
        # 환경 변수 디버깅 출력
        echo "🔍 DATABASE_URL 확인:"
        echo "- 환경 변수에 DATABASE_URL 존재 여부: $(if [ -n "$DATABASE_URL" ]; then echo "있음"; else echo "없음"; fi)"
        echo "- DATABASE_URL 길이: ${#DATABASE_URL} 글자"
        
        # 환경 변수 파일 생성 (.env.production)
        echo "🔄 .env.production 파일 생성 중..."
        echo "DATABASE_URL=$DATABASE_URL" > .env.production
        echo "NODE_ENV=production" >> .env.production
        
        # 파일 내용 확인 (민감 정보 마스킹하여 출력)
        echo "🔍 .env.production 파일 내용 확인:"
        grep -v "DATABASE_URL" .env.production || true
        echo "DATABASE_URL=********(설정됨)********"
        
        # env.production 파일도 생성 (점 없는 버전, Azure에서 숨김 파일 문제 방지)
        cp .env.production env.production
        echo "✅ env.production 파일도 생성 완료"
        
        # 마이그레이션 환경 준비 확인
        ls -la drizzle.config.* || true
        
        # 마이그레이션 실행
        echo "🔄 데이터베이스 마이그레이션을 실행합니다..."
        
        # 1. 기존 db:push 스크립트 사용
        echo "방법 1: npm run db:push 실행"
        DATABASE_URL="$DATABASE_URL" npm run db:push || true
        
        # 2. drizzle-kit push 실행 (매개변수 최적화)
        echo "방법 2: npx drizzle-kit push 최적화 실행"
        NODE_OPTIONS="--no-warnings" DATABASE_URL="$DATABASE_URL" npx drizzle-kit push || true
        
        # 3. 마이그레이션 스크립트 직접 실행
        echo "방법 3: server/migrate.js 직접 실행"
        DATABASE_URL="$DATABASE_URL" node server/migrate.js || true
        
        echo "✅ 마이그레이션 완료"
    
    - name: Prepare deployment package
      run: |
        # 배포에 필요한 파일들만 포함하는 배포 디렉토리 생성
        mkdir -p deployment/client
        
        # 클라이언트 디렉토리 준비 (client/dist가 없으므로 client/src 사용)
        echo "확인: client 디렉토리 구조"
        ls -la client/
        
        # 서버 사이드 빌드 결과물 복사 (dist)
        if [ -d dist ]; then
          cp -r dist deployment/
          echo "서버 빌드 파일 복사 완료: dist → deployment/dist"
        else
          echo "경고: dist 디렉토리가 없습니다. 서버 빌드가 필요합니다."
        fi
        
        # client 디렉토리 생성 및 필요한 파일 복사
        if [ -d client/dist ]; then
          cp -r client/dist deployment/client/
          echo "클라이언트 빌드 파일 복사 완료: client/dist → deployment/client/dist"
        else
          # client/dist가 없는 경우 client/src를 직접 복사
          mkdir -p deployment/client/src
          cp -r client/src deployment/client/
          echo "클라이언트 소스 파일 복사 완료: client/src → deployment/client/src"
        fi
        
        # node_modules 및 기타 필수 파일 복사
        cp -r node_modules deployment/
        mkdir -p deployment/public/images deployment/public/static
        
        # 필수 파일 복사
        cp package.json package-lock.json startup.js patch-helper.js deployment/
        
        # 데이터베이스 마이그레이션 관련 파일 복사
        cp drizzle.config.ts deployment/
        mkdir -p deployment/shared
        cp -r shared/* deployment/shared/ || echo "shared 디렉토리 복사 중 오류 발생"
        
        # .env.production 파일이 있으면 복사
        if [ -f .env.production ]; then
          cp .env.production deployment/
          echo ".env.production 파일 복사 완료"
        fi
        
        # public 디렉토리 복사 (이미 디렉토리인지 확인 후)
        if [ -d public ] && [ ! -f public ]; then
          cp -r public/* deployment/public/
          echo "public 디렉토리 콘텐츠 복사 완료"
        else
          echo "주의: public이 디렉토리가 아니거나 찾을 수 없습니다."
          # public 디렉토리가 없으면 기본 구조 생성
          mkdir -p deployment/public/images deployment/public/static
          echo "빈 public 디렉토리 구조 생성 완료"
        fi
        
        # 디렉토리 구조 확인
        echo "최종 배포 패키지 구조:"
        find deployment -type d | sort
        
        # 배포 대상 public 디렉토리 최종 검증
        if [ -f deployment/public ]; then
          echo "오류: deployment/public이 파일로 존재합니다!"
          rm deployment/public
          mkdir -p deployment/public/images deployment/public/static
          echo "public 디렉토리 구조 수정 완료"
        fi
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./deployment