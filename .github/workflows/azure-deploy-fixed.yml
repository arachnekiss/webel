name: Deploy to Azure Web App (Fixed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        CI: true

    - name: Build project
      run: npm run build
      env:
        CI: true

    - name: Verify build artifacts
      run: |
        echo "Checking build artifacts..."
        
        # Server build verification
        if [ -d dist ]; then
          echo "Server build successful: dist/ directory exists"
          ls -la dist/ | head -n 5
        else
          echo "Warning: dist/ directory not found"
        fi
        
        # Client build verification
        if [ -d client/dist ]; then
          echo "Client build successful: client/dist/ directory exists"
          ls -la client/dist/ | head -n 5
        else
          echo "Note: Using client/src instead of client/dist"
        fi

    - name: Setup environment
      run: |
        echo "Setting up environment variables..."
        
        # Save database connection string
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        # Create environment files
        echo "DATABASE_URL=$DATABASE_URL" > .env.production
        echo "NODE_ENV=production" >> .env.production
        echo "SKIP_MIGRATION=true" >> .env.production
        
        # Also create non-dot version for Azure
        cp .env.production env.production
        
        # Verify created files (without showing sensitive data)
        echo "Created environment files:"
        grep -v "DATABASE_URL" .env.production || true
        echo "DATABASE_URL=********" 
        
        echo "Environment setup complete"

    - name: Install database tools
      run: |
        echo "Installing database migration tools..."
        npm install -g drizzle-kit
        echo "Database tools installation complete"

    - name: Run migrations
      run: |
        echo "Running database migrations..."
        
        # Export for commands
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        # Run migrations and capture any errors but continue
        drizzle-kit push:pg || echo "Migration push encountered issues (continuing)"
        
        # Generate SQL script
        drizzle-kit generate:pg --out=./migration.sql || echo "SQL generation encountered issues (continuing)"
        
        # Check if migration file exists
        if [ -f migration.sql ]; then
          echo "Migration SQL script created successfully"
        else
          echo "Note: No migration SQL script was generated"
        fi
        
        echo "Database migration step complete"

    - name: Prepare deployment package
      run: |
        echo "Creating deployment package..."
        
        # Create deployment directory
        DEPLOY_DIR="deploy_package"
        rm -rf $DEPLOY_DIR || true
        mkdir -p $DEPLOY_DIR
        
        # Copy build artifacts
        if [ -d dist ]; then
          cp -r dist/* $DEPLOY_DIR/
        fi
        
        # Copy client files
        mkdir -p $DEPLOY_DIR/client
        if [ -d client/dist ]; then
          cp -r client/dist $DEPLOY_DIR/client/
        else
          mkdir -p $DEPLOY_DIR/client/src
          cp -r client/src $DEPLOY_DIR/client/
        fi
        
        # Copy configuration files
        cp package.json package-lock.json $DEPLOY_DIR/
        cp startup.js patch-helper.js $DEPLOY_DIR/ || true
        cp web.config .deployment $DEPLOY_DIR/ || true
        cp drizzle.config.ts $DEPLOY_DIR/ || true
        
        # Copy environment files
        cp .env.production $DEPLOY_DIR/ || true
        cp env.production $DEPLOY_DIR/ || true
        
        # Copy migration script if exists
        if [ -f migration.sql ]; then
          cp migration.sql $DEPLOY_DIR/
        fi
        
        # Create necessary directories
        mkdir -p $DEPLOY_DIR/public/images $DEPLOY_DIR/public/static
        mkdir -p $DEPLOY_DIR/server
        mkdir -p $DEPLOY_DIR/shared
        mkdir -p $DEPLOY_DIR/uploads $DEPLOY_DIR/temp
        
        # Copy directory contents 
        cp -r shared/* $DEPLOY_DIR/shared/ || echo "Note: shared/ copy operation had issues"
        
        if [ -d public ]; then
          cp -r public/* $DEPLOY_DIR/public/ || echo "Note: public/ copy operation had issues"
        fi
        
        # Create compatibility file for Azure
        echo "// Azure Kudu compatibility file" > $DEPLOY_DIR/server/startup.js
        echo "import '../startup.js';" >> $DEPLOY_DIR/server/startup.js
        chmod +x $DEPLOY_DIR/server/startup.js
        chmod +x $DEPLOY_DIR/startup.js || true
        
        # Copy node_modules for direct execution
        cp -r node_modules $DEPLOY_DIR/
        
        # Check deployment package
        echo "Deployment package content summary:"
        find $DEPLOY_DIR -maxdepth 2 -type f | head -n 10
        
        # Move package to deployment directory
        rm -rf deployment || true
        mv $DEPLOY_DIR deployment
        
        echo "Deployment package creation complete"

    - name: Create ZIP package
      run: |
        echo "Creating ZIP deployment package..."
        
        # Navigate to deployment directory
        cd deployment
        
        # Clean up unnecessary files to reduce size
        find node_modules -name "*.md" -delete 2>/dev/null || true
        find node_modules -name "*.d.ts" -delete 2>/dev/null || true
        find node_modules -name "*.map" -delete 2>/dev/null || true
        find node_modules -path "*/test/*" -delete 2>/dev/null || true
        find node_modules -path "*/tests/*" -delete 2>/dev/null || true
        
        # Create ZIP file
        zip -r ../deploy.zip * -x "*.git*" "*.github*" "node_modules/.cache/*"
        cd ..
        
        # Check ZIP file size
        du -h deploy.zip
        
        echo "ZIP package creation complete"

    - name: Verify ZIP package
      run: |
        echo "Verifying ZIP package content..."
        
        # Check if ZIP file exists
        if [ ! -f deploy.zip ]; then
          echo "Error: deploy.zip not found"
          exit 1
        fi
        
        # Check file size
        ZIP_SIZE=$(du -h deploy.zip | cut -f1)
        echo "ZIP file size: $ZIP_SIZE"
        
        # Extract and verify important files
        echo "Checking for essential files..."
        unzip -l deploy.zip > zip_contents.txt
        
        # Check for required files
        for file in "startup.js" "web.config" "package.json" "server/startup.js"; do
          if grep -q "$file" zip_contents.txt; then
            echo "✓ Found $file"
          else
            echo "✗ Missing $file"
          fi
        done
        
        # Clean up
        rm zip_contents.txt
        
        echo "ZIP package verification complete"

    - name: Deploy to Azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./deploy.zip
        clean: true
        restart: true

    - name: Deployment summary
      run: |
        echo "Deployment completed successfully"
        echo "App URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo ""
        echo "Post-deployment checklist:"
        echo "1. Verify application startup in Azure portal logs"
        echo "2. Confirm startup command is set to 'node startup.js'"
        echo "3. Verify environment variables are correctly configured"